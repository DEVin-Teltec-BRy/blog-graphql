# Root Types
type Query {
  # Root Fields
  users: [User!]!
  user(id: ID!): User
  feed(last: Int): [Post!]!
  search(input: String!): [SearchResult!]!
}

type Mutation {
  createUser(user: UserInput!): AuthPayload!
  createPost(post: PostInput!): Post!
  updateUser(user: UserInput!): User
  deletePost(postId: ID): String

  login(email: String!, password: String!): AuthPayload
}

type Subscription {
  newPost: Post
}

# Object Types
type User {
  id: ID
  name: String
  email: String
  posts: [Post]
  followers: [User]
  following: [User]
}

enum Filter {
  ASC
  DESC
}

enum Order {
  ORDENACAO
  POPULARIDADE
}

input UserInput {
  name: String
  email: String
  password: String
}

type Post {
  id: ID
  title: String
  description: String
  content: String
  isPublished: Boolean
  author: User
  createdAt: Date
}

input PostInput {
  title: String
  description: String
  content: String
}

type AuthPayload {
  token: String
  user: User
}

# custom scalar types
scalar Date

union SearchResult = User | Post
